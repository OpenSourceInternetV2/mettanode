libSSU (Structured Streams Unleashed)
 ☐ use boost::asio
 ☐ check on boost's sockets support (need at least UDP plus MTU detect and local network plus local interfaces detect)
 ☐ detach registration protocol from the transport
 ☐ checkout older version (basic SST?) and try voice service with it...
 ☐ build 32-bits only version of SST and try voice service with it?...
 ✔ unused stuff from sst: bdr.h/cc @done (13-03-09 23:19)
 
SST unfinished business:
 ☐ make regression tests pass and not crash
   ✔ dgram - passed @done (12-12-29 00:54)
   ✔ migrate - passed @done (12-12-29 00:54)
   ✔ basic - passed @done (12-12-29 00:54)
   ☐ seg - rtxTimeout - FAILED period 20000000
   ☐ all - gets stuck in seg test
 ☐ cover KeyInitiator and KeyResponder with unit tests (need to fake randomness bits somehow?)
 ☐ all services are attempting to connect to a single host multiple times - would be better if this was orchestrated separately

 ☐ run audio streaming test in both the simulation environment (file-to-file using arbitrary loss percentage) and real VoiceService environment (file-to-hw output using local network connection).

Most immediate usability necessities:
 ☐ write SST spec as an RFC draft - complete unfinished SST spec in form of RFC document
   ☐ assign IETF RFC number, see http://www.ietf.org/id-info/
 ☐ finish implementing wire protocol to specs.  Specifically:
   ☐ receiver-directed flow control
   ☐ datagram reassembly
   ☐ stream attachment and detachment
   ☐ proper stream ID allocation & assignment
   ☐ implement and use sequencing barriers properly (spec 3.4.1)
   ☐ txReset
 ☐ specify and fix negotiation protocol format
 ✔ registration protocol: specify, add explicit deregistration on shutdown @done (12-12-31 17:31)
    ☐ would be nice to move registration protocol details to the routing lib if possible?
        move started, but there are still deps on SST::Host

 ☐ give priority to local-network Endpoint addresses first (need to match network against available interfaces' IPs)
 ☐ possible DOS if localhost is specified in Endpoints? yep, tested and true, fix.

  Possibly PID (Proportional-Integral-Differential) flow control.

Renaming and restructuring to do at some point (tentative list):
 ☐ Socket -> Network (or -> Adapter?); Channel -> ChannelID (or -> FlowID?)
 ☐ SocketReceiver -> ControlProtocol?
 ☐ Flow -> Channel?
 ☐ StreamTarget -> Target, separate into its own module
 ☐ Message -> Record (e.g., readMesage() -> readRecord)?
     Might help avoid confusion between "Message" and "Datagram".

Qt wishlist for SST:
 ✔ Base64 conversion flags for URL-safe and/or '='-padding free variants. @done (12-12-24 23:19)
     Used base32 instead.
 ☐ QTimer hooks allowing time virtualization for simulation purposes.
 ☐ Make *Datagram calls in QUdpSocket virtual, or else support custom NetworkProxy extensions for virtualizing the network.
 ☐ Make QAbstractSocket a "real" abstract base class that can be subclassed for reasons other than to wrap a different kind of native socket.
 ☐ Make Qt's signal/slot mechanism handle namespaces in type names properly.
 ☐ Access to OS's path MTU detection facilities under UDP
